# encoding: utf-8

##
# Oedipus Sphinx 2 Search.
# Copyright Â© 2012 Chris Corbyn.
#
# See LICENSE file for details.
##

require "rspec/core"
require "tmpdir"

# RSpec shared context that may be included to provide a pre-defined index.
shared_context "oedipus posts_rt" do
  def sphinx_indexes
    <<-STR
    index posts_rt
    {
      type = rt
      path = #{data_dir}/posts_rt

      rt_field       = title
      rt_field       = body

      rt_attr_uint   = user_id
      rt_attr_uint   = views
      rt_attr_string = state
    }
    STR
  end
end

# RSpec shared context that may be included to start and stop sphinx between example groups.
shared_context "oedipus test rig" do
  before(:all) do
    write_sphinx_config
    start_sphinx
  end

  after(:all) do
    stop_sphinx
    clean_data_dir
  end

  after(:each) { empty_indexes }

  # It is intended that any or all of the following be overridden in tests.
  def connection
    @connection ||= Oedipus::Connection.new(host: "127.0.0.1", port: 9399, verify: false)
  end

  def data_dir
    @data_dir ||= Dir.mktmpdir("oedipus")
  end

  def searchd
    ENV["SEARCHD"] || "searchd"
  end

  def sphinx_indexes
    <<-IDX.strip.gsub(/^ {4}/, "")
    index test_rt {
      type     = rt
      path     = #{data_dir}/test_rt
      rt_field = test"
    }
    IDX
  end

  def sphinx_conf
    <<-CONF.strip.gsub(/^ {4}/, "")
    ##
    # This file is automatically generated during tests
    ##

    #{sphinx_indexes}

    searchd
    {
      compat_sphinxql_magics = 0

      max_matches  = 2000
      pid_file     = #{data_dir}/searchd.pid
      listen       = #{connection.options[:host]}:#{connection.options[:port]}:mysql41
      workers      = threads
      log          = #{data_dir}/searchd.log
      query_log    = #{data_dir}/searchd.log
      binlog_path  = #{data_dir}
    }
    CONF
  end

  def write_sphinx_config
    File.open("#{data_dir}/sphinx.conf", "w") do |f|
      f << sphinx_conf
    end
  end

  def start_sphinx
    @pid = Process.spawn(
      searchd, "-c", "#{data_dir}/sphinx.conf",
      out: "#{data_dir}/searchd.out",
      err: "#{data_dir}/searchd.err"
    )
    Process.wait(@pid)
    raise "Couldn't start sphinx" unless $? == 0
  end

  def stop_sphinx
    @pid = Process.spawn(
      searchd, "-c", "#{data_dir}/sphinx.conf", "--stopwait",
      out: "#{data_dir}/searchd.out",
      err: "#{data_dir}/searchd.err"
    )
    Process.wait(@pid)
    raise "Couldn't stop sphinx" unless $? == 0
  end

  def clean_data_dir
    Dir["#{data_dir}/**/*"].each do |path|
      File.delete(path)
    end
  end

  def empty_indexes
    connection.query("SHOW TABLES").each do |idx|
      connection.query("SELECT id FROM #{idx['Index']}").each do |hash|
        connection.execute("DELETE FROM #{idx['Index']} WHERE id = #{hash['id']}")
      end
    end
  end
end
